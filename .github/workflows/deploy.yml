name: Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # e.g. mlops/api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Render ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: mlops-api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          environment-variables: |
            API_KEY=${{ secrets.API_KEY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        timeout-minutes: 15
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: mlops-api-task-service
          cluster: mlops-cluster1
          wait-for-service-stability: true
          force-new-deployment: true

      - name: Wait for ECS service to be stable (CLI)
        run: |
          aws ecs wait services-stable \
            --cluster mlops-cluster1 \
            --services mlops-api-task-service
        timeout-minutes: 10

      - name: Smoke test /predict via ALB
        shell: pwsh
        env:
          ALB_URL: ${{ secrets.ALB_URL }}  
        run: |
          Write-Host "Workspace: $PWD"
          Write-Host "Listing repo files to verify path:"
          Get-ChildItem -Recurse | Select-Object FullName

          # Run the script with the call operator
          & ./scripts/smoke_predict.ps1 -AlbUrl "$env:ALB_URL"





      
