![CI](https://github.com/TN-Codes27/MLOps-Pipeline-on-AWS/actions/workflows/ci.yml/badge.svg)
![build-and-push-ecr](https://github.com/TN-Codes27/MLOps-Pipeline-on-AWS/actions/workflows/build-push.yml/badge.svg)
![Deploy](https://github.com/TN-Codes27/MLOps-Pipeline-on-AWS/actions/workflows/deploy.yml/badge.svg)

How to Deploy: 
1. Push to main (or run the Deploy workflow manually).
2. CI builds Docker image → pushes to ECR.
3. Deploy job renders task def with the new image and updates ECS service.
4. ECS rolls out the new task behind the ALB.
5. Health check: curl http://<ALB-DNS>/health → {"status":"ok"}


## Model Training

- Dataset: [Iris Dataset](https://scikit-learn.org/stable/datasets/toy_dataset.html#iris-plants-dataset)
- Model: Logistic Regression (`sklearn.linear_model.LogisticRegression`)
- Train/Test Split: 80/20
- Test Accuracy: ~100% (expected on this dataset)
- Model Artifact: [`model/model.joblib`](model/model.joblib)

```bash
python services/training/train.py

##  predict Endpoint

- FastAPI app loads `model/model.joblib` at startup.
- `/predict` accepts JSON with 4 floats and returns class index + label.
- Example:

```bash
curl -X POST http://127.0.0.1:8000/predict \
  -H "Content-Type: application/json" \
  -d '{"sepal_length":5.1,"sepal_width":3.5,"petal_length":1.4,"petal_width":0.2}'


